.webaudio-starter {
	@import 'options-output';
	@import 'code-output';
	@import 'tip';
	.options-output {
		.option {
			figure {
				display: inline-block;
				vertical-align: text-top;
				margin: 0 -1px 0 0;
				padding: 0;
				canvas {
					border: 1px solid;
				}
			}
			figure:last-of-type {
				margin: 0;
			}
		}
		.graph {
			@grid-size: 32px;
			@node-width: 6;
			@node-color: #DDF;

			position: relative;
			overflow: auto;
			height: @grid-size * 15;
			min-height: @grid-size * 2;
			font-size: 14px;
			font-family: sans-serif;
			margin-left: -11px; // expand to fieldset border - can't mess with fieldset itself b/c plans of option comparison
			margin-right: -2px;
			border-top: groove 2px #DDD;
			resize: vertical;
			svg {
				display: block;
				position: absolute; // resize on .graph will stop working on Chrome when both position: absolute and height: 100% are set
			}
			.nodes {
				position: absolute;
				top: 0;
				left: 0;
				width: 100%; // this has to be set, otherwise $node.position() will return wrong coords
				//height: 100%; // this has to be commented out, otherwise resize on .graph will stop working on Chrome
				.node {
					position: absolute;
					width: @grid-size*@node-width;
					margin: 0;
					padding: 0;
					border: none;
					box-shadow: 0 0 3px 3px rgba(0,0,0,0.3);
					.node-section {
						height: @grid-size;
						line-height: @grid-size;
						background: @node-color;
						text-align: center;
					}
					legend {
						position: absolute;
						margin: 0;
						padding: 0;
						width: 100%;
					}
					.node-head-controls {
						position: relative;
						height: @grid-size;
						button.delete {
							.cross-icon(@size,@color) {
								@s: unit(@size);
								@a: @s/8;
								@b: @s - @a;
								.svg(@s,@s,"<path d='M @{a} @{a} L @{b} @{b} M @{a} @{b} L @{b} @{a}' fill='none' stroke='@{color}' stroke-width='@{a}' />");
							}
							position: absolute;
							display: block;
							width: @grid-size/2;
							height: @grid-size/2;
							right: @grid-size/4;
							top: @grid-size/4;
							padding: 0;
							border: none;
							background-color: transparent;
							background-repeat: no-repeat;
							.cross-icon(@grid-size/2,#444);
							&:hover {
								.cross-icon(@grid-size/2,#C44);
								&:active {
									background-position: 0 1px;
								}
							}
							& > span {
								.visually-hidden();
							}
						}
					}
					.node-ports {
						position: relative;
						margin: 0 @grid-size;
						.node-port {
							position: absolute;
							width: 50%;
							height: @grid-size;
							top: 0;
							&.node-port-in {
								left: 0;
								text-align: left;
								&::before, .node-port-hole {
									left: -@grid-size;
								}
							}
							&.node-port-out {
								right: 0;
								text-align: right;
								&::before, .node-port-hole {
									right: -@grid-size;
								}
							}
							&::before, .node-port-hole {
								position: absolute;
								width: @grid-size/2;
								height: @grid-size/2;
								top: 0;
								border: solid @grid-size/4 @node-color;
							}
							&::before {
								content: '';
							}
							.node-port-hole {
								border-radius: @grid-size/2;
								box-shadow: inset 0 0 3px 3px rgba(0,0,0,0.3);
							}
							.node-port-label > span {
								.visually-hidden();
							}
							.node-port-controls {
								.visually-hidden();
							}
						}
					}
				}
			}
		}
	}
}
